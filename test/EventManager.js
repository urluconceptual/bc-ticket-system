const { expect } = require("chai");
const { ethers } = require("hardhat");

const tokens = (n) => {
  return ethers.parseUnits(n.toString(), 'ether');
}

describe("EventManager", () => {
  let eventManager, deployer, buyer;

  beforeEach(async () => {
    //get 2 accounts generated by hardhat
    [deployer, buyer] = await ethers.getSigners();

    //deploy the contract
    const EventManager = await ethers.getContractFactory("EventManager");
    eventManager = await EventManager.deploy()
  });

  describe("Deployment", () => {
    it("sets owner", async () => {
        expect(await eventManager.getOwner()).to.equal(deployer.address);
    });
  });

  describe("events", () => {
    let transaction;
    const EVENT_ID = 1;
    const EVENT_NAME = 'EventName';
    const TOTAL_TICKETS = 3;
    const TICKET_PRICE = tokens(1);

    beforeEach(async () => {
        transaction = await eventManager.connect(deployer).createEvent(EVENT_ID, EVENT_NAME, TOTAL_TICKETS, TICKET_PRICE);
        await transaction.wait();
    });

    it("creates new event", async () => {
      const events = await eventManager.getEvents();
      const event = events[0];
      expect(events.length).to.equal(1);
      expect(event.eventId).to.equal(EVENT_ID);
      expect(event.eventName).to.equal(EVENT_NAME);
      expect(event.totalTickets).to.equal(TOTAL_TICKETS);
      expect(event.price).to.equal(TICKET_PRICE);
    });

    it("emits eventCreated event", async () => {
      expect(transaction).to.emit(eventManager, 'EventCreated').withArgs(EVENT_ID, EVENT_NAME, TOTAL_TICKETS, TICKET_PRICE);
    });
  });
});